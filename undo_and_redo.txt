Let's start by looking at Oracle's undo and redo logs. 
Note that Oracle Database generates an undo and a redo entry for each change made to the database.
!!!!!
In simple terms, an undo entry provides the values of data stored before a change and the redo entry provides the values of data stored after a change.
!!!!!
The redo entries are written to log buffers in the system global area (SGA) whenever a change occurs.
The log writer (LGWR) process then writes the redo entries to the online redo logs, and, if the database is in ARCHIVELOG mode,
the archiver process (ARC0) writes the redo entries to the archived logs.
The purpose of the redo entries is to ensure that database activities can be replayed in case a disaster occurs in the database.
In the event of a complete loss, a DBA can restore a previous backup of the database and apply all the archived logs generated since that
time to roll it forward to the time of failure. 

What about undo?
According to Oracle's read consistency model, a user sees the value of a database change only after the change is committed;
otherwise, the database returns the previous (unchanged) values. These previous values are retrieved from the undo segments.
Furthermore, during data recovery after a disaster, Oracle Database must roll back all changes that were not committed,
to maintain consistency and data integrity.
These entries are also obtained from the undo segments. Because undo segments are also database changes,
they generate redo entries as well, which go into online redo logs and then to archived logs. 


As a result, online and archived logs contain both undo and redo information.
DBAs can use them to see both old and new data values.
However, online and archived logs have an unpublished format and are not human-readable.
To read them, DBAs use a tool called Oracle LogMiner, which makes it possible to read and search both online and archived logs.
It is implemented via a supplied package named DBMS_LOGMNR, introduced in Oracle8i.

