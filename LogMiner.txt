- [Mining for Clues - By Arup Nanda|http://www.oracle.com/technology/oramag/oracle/05-jul/o45dba.html]

!!!!! By default, Oracle Database does not provide any supplemental logging, which means that by default LogMiner is not usable. 

Let's start by looking at Oracle's undo and redo logs. 
Note that Oracle Database generates an undo and a redo entry for each change made to the database.
!!!!!
In simple terms, an undo entry provides the values of data stored before a change and the redo entry provides the values of data stored after a change.
!!!!!
The redo entries are written to log buffers in the system global area (SGA) whenever a change occurs.
The log writer (LGWR) process then writes the redo entries to the online redo logs, and, if the database is in ARCHIVELOG mode,
the archiver process (ARC0) writes the redo entries to the archived logs.
The purpose of the redo entries is to ensure that database activities can be replayed in case a disaster occurs in the database.
In the event of a complete loss, a DBA can restore a previous backup of the database and apply all the archived logs generated since that
time to roll it forward to the time of failure. 

What about undo?
According to Oracle's read consistency model, a user sees the value of a database change only after the change is committed;
otherwise, the database returns the previous (unchanged) values. These previous values are retrieved from the undo segments.
Furthermore, during data recovery after a disaster, Oracle Database must roll back all changes that were not committed,
to maintain consistency and data integrity.
These entries are also obtained from the undo segments. Because undo segments are also database changes,
they generate redo entries as well, which go into online redo logs and then to archived logs. 


As a result, online and archived logs contain both undo and redo information.
DBAs can use them to see both old and new data values.
However, online and archived logs have an unpublished format and are not human-readable.
To read them, DBAs use a tool called Oracle LogMiner, which makes it possible to read and search both online and archived logs.
It is implemented via a supplied package named DBMS_LOGMNR, introduced in Oracle8i.




##################################################################
Mining Option 1 - Local ( Mine on source Database)
##################################################################



Let's return to the issue of Ms. Smith's account.
John can start looking for how and when the account manager was changed by using Flashback Query to select prior values of the record in this table.
Flashback Query is an Oracle feature that lets a user see the value of a column at some point in the past, 
before that value may have been changed and committed. However, the Flashback Query approach works only if a change occurred within the period 
specified by the UNDO_RETENTION parameter, which is often as short as 30 minutes for an OLTP database.
In this case, there's a good chance that Flashback Query will not find the change. 
 

DBA can find the answer to the question at hand by looking directly at the online redo log files, using LogMiner. 
Here are the steps for setting up and using LogMiner: 


1. Install the DBMS_LOGMNR package. 
   DBA installs the package by logging on to SQL*Plus as SYS and executing the
   $ORACLE_HOME/rdbms/admin/dbmslm.sql
   $ORACLE_HOME/rdbms/admin/dbmslmd.sql
   $ORACLE_HOME/rdbms/admin/prvtlmd.sql 
  

   Note: These two scripts to be run are SYS user. The first of a script used to create DBMS_LOGMNR package, the package used to analyze the log files. 
         The second script is used to create DBMS_LOGMNR_D package, the package used to create the data dictionary file 

 
2. alter database add supplemental log data;
   #ALTER DATABASE DROP SUPPLEMENTAL LOG DATA; 

   !!!!! By default, Oracle Database does not provide any supplemental logging, which means that by default LogMiner is not usable. 
   !!!!!No point of using LogMiner if SUPPLEMENTAL LOG NOT SET

3. use alternate tablespace to store LogMiner tables. by default, SYSTEM is used. Or create new logminer tablespace
   EXECUTE DBMS_LOGMNR_D.SET_TABLESPACE ( 'tools'); 


4. SELECT distinct member LOGFILENAME FROM V$LOGFILE;

   /workability/wkabstg1/oracle/oradata/redo01a.log
   /workability/wkabstg1/oracle/oradata/redo01b.log
   /workability/wkabstg1/oracle/oradata/redo02a.log
   /workability/wkabstg1/oracle/oradata/redo02b.log
   /workability/wkabstg1/oracle/oradata/redo03a.log
   /workability/wkabstg1/oracle/oradata/redo03b.log
   /workability/wkabstg1/oracle/oradata/redo04a.log
   /workability/wkabstg1/oracle/oradata/redo04b.log
   /workability/wkabstg1/oracle/oradata/redo05a.log
   /workability/wkabstg1/oracle/oradata/redo05b.log
   /workability/wkabstg1/oracle/oradata/redo06a.log
   /workability/wkabstg1/oracle/oradata/redo06b.log




5. BEGIN
   DBMS_LOGMNR.ADD_LOGFILE  
      ('/workability/wkabstg1/oracle/oradata/redo01a.log');
   DBMS_LOGMNR.ADD_LOGFILE 
      ('/workability/wkabstg1/oracle/oradata/redo01b.log');
   END;
or 
   execute dbms_logmnr.add_logfile (logfilename => '/workability/wkabstg1/oracle/oradata/redo01a.log'); 
   execute dbms_logmnr.add_logfile (logfilename => '/workability/wkabstg1/oracle/oradata/redo01b.log'); 

or execute dbms_logmnr.add_logfile (logfilename => '/workability/wkabstg1/oracle/oradata/redo01a.log', options => dbms_logmnr.addfile); 
   execute dbms_logmnr.add_logfile (logfilename => '/workability/wkabstg1/oracle/oradata/redo01b.log', options => dbms_logmnr.addfile);

  ##--To remove
  #execute dbms_logmnr.add_logfile (logfilename => '/workability/wkabstg1/oracle/oradata/redo01a.log', options => dbms_logmnr.removefile); 




6. Start the LogMiner session and specify a dictionary. DBA executes the following SQL to start the LogMiner session: 

   BEGIN
   DBMS_LOGMNR.START_LOGMNR
   (options => 
   dbms_logmnr.dict_from_online_catalog);
   END;


   Note: As previously mentioned, redo log entries are not written in clear text.
         LogMiner provides human-readable reporting from the redo log files, but some reported values may not look like the original objects. 
         To make the redo log data more readable, John can ask LogMiner to convert these values to more recognizable ones by
         translating them from a dictionary.

7. Check contents. Starting the LogMiner session populates a view named V$LOGMNR_CONTENTS, which DBA can then 
   query to find out what happened to particular account. 


   SQL>  select username, to_char(timestamp,'mm/dd/yy hh24:mi:ss') timestamp,
         seg_type_name, seg_name, table_space, session# SID, serial#
         from v$logmnr_contents
         where table_name = 'ACCOUNTS'
         and seg_owner = 'ARUP'
         and operation = 'UPDATE';

         Note: Another column in this view, SESSION_INFO, provides additional information on Joe's session. The value of the SESSION_INFO column for all the rows is 
              login_username=JOE 
	      client_info= 
              OS_username=jsmoe 
              Machine_name=ACMENTNY\JSMOE 
              OS_terminal= OS_process_id=4080:3096 OS_program name=sqlplus.exe


    SQL>  select sql_undo, sql_redo
          from v$logmnr_contents
          where table_name = 'ACCOUNTS'
          and seg_owner = 'ARUP'
          and operation = 'UPDATE';

         Note: The output in the SQL_UNDO and SQL_REDO columns in Listing 2 is not very easy to read, because everything is on one line
               After below command runs, the output for the SQL_UNDO column from the query in Listing 2 against V$LOGMNR_CONTENTS will look more redable
              



        begin
          dbms_logmnr.start_logmnr( 
          options =>
          dbms_logmnr.
          dict_from_online_catalog +
          dbms_logmnr.print_pretty_sql +
          dbms_logmnr.no_sql_delimiter
          );
       end;

        

8.     Selective Correction 

       SQL>  begin
      for undo_rec in (
        select sql_undo, row_id
        from v$logmnr_contents
        where table_name='ACCOUNTS' and seg_owner='ARUP' and operation='UPDATE' 
        and dbms_logmnr.column_present(undo_value,'ARUP.ACCOUNTS.ACC_MGR_ID')=1
        and dbms_logmnr.column_present(redo_value,'ARUP.ACCOUNTS.ACC_MGR_ID')=1
        )
        loop
         begin
            execute immediate undo_rec.sql_undo;
         exception
           when no_data_found then
              dbms_output.put_line('RowId '||undo_rec.row_id||' Failed.');
         end;
       end loop;
    end;  


9. EXECUTE DBMS_LOGMNR.END_LOGMNR;
##################################################################
Mining Option 2 - Remote Mining
##################################################################

The foregoing discussion showed how to use LogMiner on the source database in the production environment.
For increased security, John may want to transfer the archived logs to a different database and perform the mining there. 
Because this remote database would not be accessible to the DBAs of the source database, this approach minimizes
the chances that a malicious DBA will remove his trail of commands.
Another motivation behind remote mining is to limit the performance impact on the source database by 
offloading mining activity to a separate database. 

With the present setup, however, there is one minor issue John must first address.
In the scenario above, John used the online data dictionary as the dictionary for translating the redo log object names from hexadecimal
values to readable names. That approach works fine for using the source database, but when the mining is performed on a remote database,
the online dictionary of the source database is not available. 

If DBA  uses remote mining, he has two alternatives for solving this problem: 
1. He can make LogMiner write the online data dictionary information to the redo log files,
   which go into the archived logs and can be used at the remote location. 

   
   begin
      dbms_logmnr_d.build (
        options => dbms_logmnr_d.store_in_redo_logs
      );
   end;


  Note: that the database must be in archivelog mode to enable this option. 
        Archivelog mode adds the dictionary information to the online redo logs, which, in turn, go into the archived logs.
        When DBA is ready to mine, DBA will transfer these archived log files, using a file transfer utility such as FTP, 
        and 
         Do this on other database?
        include them for mining in the add_logfile procedure in the dbms_logmnr package


        dbms_logmnr.start_logmnr( options =>
          dbms_logmnr.dict_from_redo_logs
        );


2. He can download the source location's data dictionary to a flat file and use it at the remote location. 
    If DBA chooses this option (storing the data dictionary in a flat file), he will specify a file where the new dictionary should be generated.
    Oracle Database must be able to write to the directory, using the UTL_FILE package, so the file location must be specified in the UTL_FILE_DIR
    initialization parameter. If it is not set already, John will set it to a directory such as /tmp (in UNIX): 

     utl_file_dir = '/tmp'


    DBAwill then restart the source database instance for this change to take effect and will then generate the new dictionary by executing 


   begin
      dbms_logmnr_d.build (
        dictionary_filename => 'ora_dict.txt',
        dictionary_location => '/tmp'
     );
   end;

or

  EXECUTE DBMS_LOGMNR_D.BUILD('dictionary.ora', - 
   '/oracle/database/', -
    DBMS_LOGMNR_D.STORE_IN_FLAT_FILE);


    This command generates a file named ora_dict.txt in the /tmp directory. DBA will then transfer the /tmp/ora_dict.txt file from the source
    to the remote database server in the /tmp directory and start the LogMiner session by executing 


    dbms_logmnr.start_logmnr(dictfilename => '/tmp/ora_dict.txt');





    
Note: !!! Should be completed in Task 1 of Option 1 Both options require downloading the online data dictionary, as either a redo log or a flat file.
      This task can be performed with a supplied package called DBMS_LOGMNR_D. 
     If the package is not already present, John can create it by running the dbmslmd.sql and prvtlmd.sql scripts
     in the $ORACLE_HOME/rdbms/admin directory. 

     

Hi friend,


There is no third party tool avilable for log miner.
Log miner utility comes with the oracle software alone.
Use the following steps in oracle sqlplus,


Create Dictionary File

UTL_FILE_DIR=C:\Oracle\Oradata\TSH1\Archive
The dictionary file is created using the BUILD procedure in the DBMS_LOGMNR_D package.
BEGIN
DBMS_LOGMNR_D.build (
dictionary_filename => 'TSH1dict.ora',
dictionary_location => 'C:\Oracle\Oradata\TSH1\Archive');
END;
/

Adding Logs

BEGIN
DBMS_LOGMNR.add_logfile (
options => DBMS_LOGMNR.new,
logfilename => 'C:\Oracle\Oradata\TSH1\Archive\TSH1\T001S00006.ARC');

DBMS_LOGMNR.add_logfile (
options => DBMS_LOGMNR.addfile,
logfilename => 'C:\Oracle\Oradata\TSH1\Archive\TSH1\T001S00007.ARC');
END;
/

Starting LogMiner

BEGIN
-- Start using all logs
DBMS_LOGMNR.start_logmnr (
dictfilename => 'C:\Oracle\Oradata\TSH1\Archive\TSH1dict.ora');
END;
/

Querying Log Information

The following query displays the SQL issued along with the undo SQL to reverse it.
SELECT scn, operation, sql_redo, sql_undo
FROM v$logmnr_contents;


Stopping LogMiner

Once the analysis is complete, logminer should be stopped using the END_LOGMNR procedure.
BEGIN
DBMS_LOGMNR.end_logmnr
END;
/


***********Good Web Links ************************************************************************

- [Using LogMiner to Analyze Redo Logs|http://download.oracle.com/docs/cd/B10500_01/server.920/a96521/logminer.htm] 
- [Mining for Clues - By Arup Nanda|http://www.oracle.com/technology/oramag/oracle/05-jul/o45dba.html] 
- [Steps and examples to use logminer for Remote mining |http://arjudba.blogspot.com/2008/08/steps-and-examples-to-use-logminer-for.html] 

Oracle Doc: http://download.oracle.com/docs/cd/B19306_01/server.102/b14215/logminer.htm