- name: Check for target DB existance
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.command: "{{ grid_home }}/bin/srvctl status database -d {{ db_unique_name }} "
  register: command_result
  failed_when: "'Database is not running' in command_result.stdout or command_result.rc != 0"
  changed_when: false
  args:
    removes: "{{ stage_directory }}/oracle_setup_status_kill_user_sessions_{{ lst_name }}_in_prgress"

- name: Display DB existence
  ansible.builtin.debug:
    var: command_result

- name: List DB status
  ansible.builtin.debug:
    msg: "srvctl output {{ command_result.stdout }}"

- name: Query open_mode of DB
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && {{ oracle_home }}/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    whenever sqlerror exit failure 1
    select open_mode from v\$database;
    EOF
  register: display_open_mode
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ instance_name }}"
  args:
    removes: "{{ stage_directory }}/oracle_setup_status_kill_user_sessions_{{ lst_name }}_in_prgress"

- name: Fail when database is not open
  ansible.builtin.fail:
    msg: "Database {{ instance_name }} is not open in read write mode, cannot continue."
  when:
    - '"skipped" not in display_open_mode.stdout'
    - '"READ WRITE" not in display_open_mode.stdout'

- name: Check if database is a container
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && {{ oracle_home }}/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select cdb from v\$DATABASE;
    EOF
  register: is_cdb
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ instance_name }}"
  args:
    removes: "{{ stage_directory }}/oracle_setup_status_kill_user_sessions_{{ lst_name }}_in_prgress"
