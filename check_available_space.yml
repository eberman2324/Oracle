- name: Fetch free space for data
  become_user: "{{ grid_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && {{ grid_home }}/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select round(free_mb,-1) from v\$asm_diskgroup where name='{{ data_dg_name }}';
    EOF
  register: free_data
  changed_when: "free_data.rc == 0"
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    ORACLE_SID: "+ASM"

- name: Fetch free space for redo1
  become_user: "{{ grid_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && {{ grid_home }}/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select round(free_mb,-1) from v\$asm_diskgroup where name='{{ redo1_dg_name }}';
    EOF
  register: free_redo1
  changed_when: "free_redo1.rc == 0"
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    ORACLE_SID: "+ASM"

- name: Fetch free space for redo2
  become_user: "{{ grid_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && {{ grid_home }}/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select round(free_mb,-1) from v\$asm_diskgroup where name='{{ redo2_dg_name }}';
    EOF
  register: free_redo2
  changed_when: "free_redo2.rc == 0"
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    ORACLE_SID: "+ASM"

- name: Fetch Source Data Disk Groups
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select unique regexp_substr(name,'[^/]+', 1, level) name from v\$datafile connect by regexp_substr(name, '[^,]+', 1, level) is not null;
    EOF
  environment:
    ORACLE_HOME: "{{ source_oracle_home }}"
    ORACLE_SID: "{{ source_db_name }}"
  register: source_data_dg_list
  changed_when: "source_data_dg_list.rc == 0"
  delegate_to: "{{ source_host }}"

- name: Fetch Dest Data Disk Groups
  become_user: "{{ grid_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && {{ grid_home }}/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select name from v\$asm_diskgroup where group_number in (select group_number from v\$asm_disk where path like '/dev/oracleasm/disks/{{ disk_string }}D%_');
    EOF
  register: data_dg_list
  changed_when: "data_dg_list.rc == 0"
  environment:
    ORACLE_HOME: "{{ grid_home }}"
    ORACLE_SID: "+ASM"

- name: Fail when disk group mis-match
  when:
    - source_data_dg_list | length != data_dg_list | length
  ansible.builtin.fail:
    msg:
      - 'Disk Group mis-match between source and dest'
      - 'Source Disk groups: {{ source_data_dg_list.stdout }}'
      - 'Disk groups: {{ data_dg_list.stdout }}'

- name: Fetch space required for data
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select nvl(round(sum(bytes)/1024/1024,-1),0) from V\$datafile where name like '{{ source_data_dg_list.stdout_lines[0] }}%';
    EOF
  environment:
    ORACLE_HOME: "{{ source_oracle_home }}"
    ORACLE_SID: "{{ source_db_name }}"
  register: required_data_space
  changed_when: "required_data_space.rc == 0"
  delegate_to: "{{ source_host }}"

- name: Fetch REDO log size
  when: log_size is not defined
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select distinct bytes/1024/1024 from v\$log;
    EOF
  environment:
    ORACLE_HOME: "{{ source_oracle_home }}"
    ORACLE_SID: "{{ source_db_name }}"
  register: redo_log_size
  changed_when: "redo_log_size.rc == 0"
  delegate_to: "{{ source_host }}"

- name: Fetch REDO log count
  when: log_count is not defined
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select count(*) from v\$log;
    EOF
  environment:
    ORACLE_HOME: "{{ source_oracle_home }}"
    ORACLE_SID: "{{ source_db_name }}"
  register: redo_log_count
  changed_when: "redo_log_count.rc == 0"
  delegate_to: "{{ source_host }}"

- name: Set log_size value
  when: log_size is not defined
  ansible.builtin.set_fact:
    log_size: "{{ redo_log_size.stdout }}"

- name: Set log_count value
  when: log_count is not defined
  ansible.builtin.set_fact:
    log_count: "{{ redo_log_count.stdout }}"

- name: Calculate required redo log space
  ansible.builtin.set_fact:
    required_redo_space: "{{ log_size | int * log_count | int }}"

- name: Fail when insufficient data disk space
  when:
    - required_data_space.stdout | int > free_data.stdout | int
  ansible.builtin.fail:
    msg:
      - 'Insufficient Data Disk Group space availble on dest'
      - 'Source Data Disk space required: {{ required_data_space.stdout }}'
      - 'Dest Data Disk space available: {{ free_data.stdout }}'

- name: Fail when insufficient REDO1 disk space
  when:
    - required_redo_space | int > free_redo1.stdout | int
  ansible.builtin.fail:
    msg:
      - 'Insufficient REDO1 Disk Group space availble on dest'
      - 'Source Data Disk space required: {{ required_redo_space }}'
      - 'Dest Data Disk space available: {{ free_redo1.stdout }}'

- name: Fail when insufficient REDO2 disk space
  when:
    - required_redo_space | int > free_redo2.stdout | int
  ansible.builtin.fail:
    msg:
      - 'Insufficient REDO2 Disk Group space availble on dest'
      - 'Source REDO2 space required: {{ required_redo_space }}'
      - 'Dest REDO2 space available: {{ free_redo2.stdout }}'