- name: Echo configuring dg broker to log
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nconfiguring DG broker........" >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Check for broker configuration
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/dgmgrl -echo / "show configuration"
  environment:
    ORACLE_HOME: "{{ primary_oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
    SERVER_NAME: "{{ ansible_hostname }}"
    LD_LIBRARY_PATH: "{{ primary_oracle_home }}/lib"
  register: dg_broker_config
  failed_when:
    - '"ORA-16532" not in dg_broker_config.stdout'
    - '"ORA-16596"  not in dg_broker_config.stdout'
    - 'dg_broker_config.rc != 0'
  delegate_to: "{{ primary_host }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Echo broker config exists
  when:
    - '"ORA-16532" not in dg_broker_config.stdout'
    - '"ORA-16596" not in dg_broker_config.stdout'
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nDG Broker Config exists, adding standby to existing config....." >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Echo broker config does not exist
  when:
    - '"ORA-16532" in dg_broker_config.stdout or "ORA-16596"  in dg_broker_config.stdout'
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nDG Broker Config does not exist, creating configconfig....." >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Create Broker config
  when:
    - '"ORA-16532" in dg_broker_config.stdout or "ORA-16596"  in dg_broker_config.stdout'
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/dgmgrl -echo / \
    "create configuration '$ORACLE_SID' as primary database is '${DB_UNIQUE_NAME}' connect identifier is ${SOURCE}" \
    | ssh -o StrictHostKeyChecking=no {{ oracle_user }}@${SERVER_NAME} -T "cat >> {{ log_file }}"
    set -o pipefail && $ORACLE_HOME/bin/dgmgrl -echo / \
    "edit database '${ORACLE_SID}_${PRIMARY_HOST}' set property StaticConnectIdentifier=${SOURCE}" \
    | ssh -o StrictHostKeyChecking=no {{ oracle_user }}@${SERVER_NAME} -T "cat >> {{ log_file }}"
  environment:
    ORACLE_HOME: "{{ primary_oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
    DB_UNIQUE_NAME: "{{ primary_db_unique_name.stdout }}"
    PRIMARY_HOST: "{{ primary_host }}"
    LD_LIBRARY_PATH: "{{ primary_oracle_home }}/lib"
    SERVER_NAME: "{{ ansible_hostname }}"
    SOURCE: "\"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST={{ primary_host }})(PORT={{ db_port }}))(CONNECT_DATA=(SID={{ db_name }})))\""
  delegate_to: "{{ primary_host }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Pause for 30 seconds for broker
  ansible.builtin.pause:
    seconds: 30

- name: Add Standby to broker  config
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/dgmgrl -echo / \
    "add database '${DB_UNIQUE_NAME}' as  connect identifier is ${DEST} maintained as physical" \
    | ssh -o StrictHostKeyChecking=no {{ oracle_user }}@${SERVER_NAME} -T "cat >> {{ log_file }}"
    set -o pipefail &&$ORACLE_HOME/bin/dgmgrl -echo / \
    "edit database '${DB_UNIQUE_NAME}' set property StaticConnectIdentifier=${DEST}" \
    | ssh -o StrictHostKeyChecking=no {{ oracle_user }}@${SERVER_NAME} -T "cat >> {{ log_file }}"
    set -o pipefail &&$ORACLE_HOME/bin/dgmgrl -echo / "enable configuration" \
    | ssh -o StrictHostKeyChecking=no {{ oracle_user }}@${SERVER_NAME} -T "cat >> {{ log_file }}"
    set -o pipefail &&$ORACLE_HOME/bin/dgmgrl -echo / "EDIT CONFIGURATION SET PROPERTY OperationTimeout=120;" \
    | ssh -o StrictHostKeyChecking=no {{ oracle_user }}@${SERVER_NAME} -T "cat >> {{ log_file }}"
    set -o pipefail &&$ORACLE_HOME/bin/dgmgrl -echo / "enable configuration;" \
    | ssh -o StrictHostKeyChecking=no {{ oracle_user }}@${SERVER_NAME} -T "cat >> {{ log_file }}"
  environment:
    ORACLE_HOME: "{{ primary_oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
    SERVER_NAME: "{{ ansible_hostname }}"
    DB_UNIQUE_NAME: "{{ db_unique_name }}"
    LD_LIBRARY_PATH: "{{ primary_oracle_home }}/lib"
    DEST: "\"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST={{ ansible_hostname }})(PORT={{ db_port }}))(CONNECT_DATA=(SID={{ db_name }})))\""
  delegate_to: "{{ primary_host }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Echo DG broker config
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nDG broker configuration complete." >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
