- name: Echo startup standby database to logfile.
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nStarting standby instance for duplicate..... " >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Create pfile for dummy instance
  become: true
  ansible.builtin.lineinfile:
    line: "{{ item }}"
    path: "{{ oracle_home }}/dbs/init_for_clone.pfile"
    mode: "0600"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_install_group }}"
    create: true
  with_items:
    - "DB_NAME={{ db_name }}"
    - "CPU_COUNT=4"

- name: Create pwfile for dummy instance
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.command: "scp -o StrictHostKeyChecking=no {{ primary_host }}:{{ primary_oracle_home }}/dbs/orapw{{ db_name }} {{ oracle_home }}/dbs"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Start dummy database
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF >> {{ log_file }}
    set  echo on ver off pages 0 linesize 180 trims on head off feed off
    startup nomount pfile=?/dbs/init_for_clone.pfile;
    EOF
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Echo  standby database started to logfile.
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nStandby instance for duplicate has been started..... " >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
