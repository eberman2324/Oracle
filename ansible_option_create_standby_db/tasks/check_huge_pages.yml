- name: Fetch free huge pages
  become_user: "{{ grid_user }}"
  become: true
  ansible.builtin.shell: "set -o pipefail && grep HugePages_Free /proc/meminfo | awk ' {print $2} ' | xargs"
  register: free_huge_pages
  changed_when: "free_huge_pages.rc == 0"

- name: Fetch sga size of primary database
  become_user: "{{ oracle_user }}"
  become: true
  when: sga_size is not defined
  ansible.builtin.shell: |
    $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select  value from v\$parameter where name = 'sga_max_size';
    EOF
  register: prim_sga_size
  environment:
    ORACLE_HOME: "{{ primary_oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
  delegate_to: "{{ primary_host }}"
  changed_when: "prim_sga_size.rc == 0"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
  tags:
    - db_prereq

- name: Set SGA size
  when: sga_size is not defined
  ansible.builtin.set_fact:
    sga_size: "{{ prim_sga_size.stdout }}"

- name: Echo end create standby db to logfile.
  when:
    - free_huge_pages.stdout | int * 2097152 < sga_size | int
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nInsufficient huge pages allocated on {{ ansible_hostname }} " >> {{ log_file }}
    echo -e "\nPlease ensure there are sufficint huge pages allocated for a {{ sga_size }} byte SGA"\
            " before retrying the create standby playbook" >> {{ log_file }}
    echo -e "\nCurrent huge pages free: {{ free_huge_pages.stdout }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Fail when inadequate huge pages free
  when:
    - free_huge_pages.stdout | int * 2097152 < sga_size | int
  ansible.builtin.fail:
    msg:
      - 'Oracle standby  database creation failed!'
      - 'Insufficient free huge pages'
      - 'Huge Pages Available: {{ free_huge_pages.stdout }}'
  tags:
    - db_prereq

- name: Echo continue create standby db to logfile.
  when:
    - inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nSufficient huge pages allocated on {{ ansible_hostname }} continuing with duplicate..... " >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
