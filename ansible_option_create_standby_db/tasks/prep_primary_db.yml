- name: Echo prep primary database to logfile.
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nPreping primary database on {{ primary_host }} for dataguard setup..... " >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Fetch standby redo count
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select count(distinct group#) from v\$standby_log ;
    EOF
  register: standby_redo_count
  environment:
    ORACLE_HOME: "{{ primary_oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
  delegate_to: "{{ primary_host }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
  tags:
    - db_prep

- name: Fetch primary REDO disk group names
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select distinct regexp_substr(member,'[^/]+', 1) dg_name from v\$logfile order by dg_name;
    EOF
  register: primary_redo_log_groups
  environment:
    ORACLE_HOME: "{{ primary_oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
  delegate_to: "{{ primary_host }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
  tags:
    - db_prep

- name: Fetch forced loging from primary
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    set -o pipefail && $ORACLE_HOME/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    select force_logging from v\$database;
    EOF
  register: forced_logging
  environment:
    ORACLE_HOME: "{{ primary_oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
  delegate_to: "{{ primary_host }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
  tags:
    - db_prep

- name: Create sql directory
  become: true
  ansible.builtin.file:
    path: "{{ primary_oracle_base }}/app/oracle/admin/{{ db_name }}/sql"
    state: directory
    owner: "{{ oracle_user }}"
    group: "{{ osdba_group }}"
    mode: "0775"
  delegate_to: "{{ primary_host }}"

- name: Remove prep script
  become: true
  ansible.builtin.file:
    path: "{{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.sql"
    state: absent
  delegate_to: "{{ primary_host }}"

- name: Add spool and error exit to primay config script
  remote_user: "{{ root_user }}"
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.lineinfile:
    path: "{{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.sql"
    line: "{{ item }}"
    create: true
    mode: "0644"
  with_items:
    - whenever sqlerror exit 1
    - spool {{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.out
    - set echo on
  delegate_to: "{{ primary_host }}"
  tags:
    - db_prep

- name: Add standby logs to primay config script
  when: standby_redo_count.stdout | int == 0
  become: true
  become_user: "{{ oracle_user }}"
  ansible.builtin.lineinfile:
    path: "{{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.sql"
    line: "alter database add standby logfile thread 1 group {{ item }} ('{{ primary_redo_log_groups.stdout_lines[0] }}',
    '{{ primary_redo_log_groups.stdout_lines[1] }}') size {{ redo_log_size.stdout }}m blocksize 4096;"
  with_sequence: start=101 end="{{ redo_log_count.stdout | int + 101 }}"
  delegate_to: "{{ primary_host }}"
  tags:
    - db_prep

- name: Add forced loging to prep script
  remote_user: "{{ root_user }}"
  become: true
  become_user: "{{ oracle_user }}"
  when: forced_logging.stdout == 'NO'
  ansible.builtin.lineinfile:
    path: "{{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.sql"
    line: 'alter system set dg_broker_start=TRUE;'
  delegate_to: "{{ primary_host }}"
  tags:
    - db_prep

- name: Add dg broker to primay config script
  remote_user: "{{ root_user }}"
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.lineinfile:
    path: "{{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.sql"
    line: "{{ item }}"
  with_items:
    - alter system set dg_broker_start=TRUE;
    - exit;
  delegate_to: "{{ primary_host }}"
  tags:
    - db_prep

- name: Echo execute prep script  to logfile.
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nExecuting prep script {{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.sql on {{ primary_host }}..... " >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Execute prep script
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.command: "$ORACLE_HOME/bin/sqlplus / as sysdba @{{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.sql "
  environment:
    ORACLE_HOME: "{{ primary_oracle_home }}"
    ORACLE_SID: "{{ db_name }}"
  delegate_to: "{{ primary_host }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
  tags:
    - db_prep

- name: Fetch the prep log
  become: true
  become_user: "{{ oracle_user }}"
  ansible.builtin.fetch:
    src: "{{ primary_oracle_base }}/admin/{{ db_name }}/sql/prep_primary_db.out"
    dest: "buffer/{{ primary_host }}-prep_primary_db.out"
    flat: true
  delegate_to: "{{ primary_host }}"

- name: Add prep log to job log
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: "echo '{{ lookup('file', 'buffer/{{ primary_host }}-prep_primary_db.out') }}' >> {{ log_file }}"
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"

- name: Echo prep complete  to logfile.
  when: inventory_hostname in groups['dbservers']
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    echo -e "\nPrep of primary db on {{ primary_host }} is complete continuing with duplicate..... " >> {{ log_file }}
  args:
    creates: "{{ stage_directory }}/oracle_setup_status_create_standby_db_{{ db_name }}_successful"
