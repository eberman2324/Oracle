- name: Fetch db_name
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    {{ oracle_home }}/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    SELECT sys_context('USERENV','DB_NAME') AS Database_Name from dual;
    EOF
  register: db_name_out
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ instance_name }}"
  args:
    creates: "{{ stage_directory }}/{{ lst_name }}_users_to_unlock.lst"

- name: Fetch db_unique_name
  become_user: "{{ oracle_user }}"
  become: true
  ansible.builtin.shell: |
    {{ oracle_home }}/bin/sqlplus -s / as sysdba <<EOF
    set  echo off ver off pages 0 linesize 180 trims on head off feed off
    SELECT sys_context('USERENV','DB_UNIQUE_NAME') AS DB_Unique__Name from dual;
    EOF
  register: db_unique_name_out
  environment:
    ORACLE_HOME: "{{ oracle_home }}"
    ORACLE_SID: "{{ instance_name }}"
  args:
    creates: "{{ stage_directory }}/{{ lst_name }}_users_to_unlock.lst"

- name: List db_unique_name for db
  ansible.builtin.debug:
    msg: "DB_UNIQUE_NAME for db {{ instance_name }} is {{ db_unique_name_out.stdout }}"

- name: List db_name for instance
  ansible.builtin.debug:
    msg: "DB_NAME for instance {{ instance_name }} is {{ db_name_out.stdout }}"

- name: Set db name values
  ansible.builtin.set_fact:
    db_name: "{{ db_name_out.stdout }}"
    db_unique_name: "{{ db_unique_name_out.stdout }}"
