Hi, the 'DBMS_SUPPORT.START_TRACE_IN_SESSION' Package is supplied in the files dbmssupp.sql and prvtsupp.plb. 


The following version release have support for this package.

8.0.6, 8.1.7, 9.0.1, 9.2.0 and above

You can install the package with next steps:

SQL> connect / AS SYSDBA
SQL> @?\rdbms\admin\dbmssupp.sql 

or
cd cd $ORACLE_HOME/rdbms/admin
sqlplus / as sysdba
@dbmssupp.sql

SQL> GRANT execute ON dbms_support TO schema_owner;
SQL> CREATE PUBLIC SYNONYM dbms_support FOR dbms_support;
***********************************************************************************************************************

 You will need to get the sid and the serial# from v$session. Once you have them, issue one of the following:

You can use dbms_support to enable and disable the trace. 
If it is not installed, you will need run $ORACLE_HOME/rdbms/admin/dbmssupp.sql

To enable a level 1 trace, like setting sql_trace=true
exec dbms_support.start_trace_in_session(<sid>,<serial#>);

To enable trace with binds
exec dbms_support.start_trace_in_session(<sid>,<serial#>,binds=true);

Toe enable trace with binds and waits
exec dbms_support.start_trace_in_session(<sid>,<serial#>,waits=true,binds=true);

To stop tracing
exec dbms_support.stop_trace_in_session(<sid>,<serial#>);

It is better to end the session instead of disabling the trace.
 Some cursor stat lines may not be written to the trace when disabling
 trace that would have been written if the session terminated. 
****************************************************************************************************************************

wkabqa3 example

cd /boraw1qu01/app/oracle/admin/wkabqa3/udump

1 .Get serial$ and id fro v$session for this session. Ask what program name
   select * from v$session where program = 'WkabImport.exe'
2. exec dbms_support.start_trace_in_session(188,44297);
3  exec dbms_support.stop_trace_in_session(<sid>,<serial#>);
   exec dbms_support.stop_trace_in_session(188,44297);
4. pull out trace file from udump 

5. on your operating system: tkprof <trace file> a.txt sys=no sort=prsela exeela fchela

tkprof HEDWSTS_ora_12076.trc HEDWSTS_ora_12076.prf sys=no sort=PRSCPU prsela exeela fchela

tkprof HEDWSTS_ora_12076.trc HEDWSTS_ora_12076.prf sys=no explain=ATEST/Oct13#2020



***********Logon Trigger to TRACE *************************************

CREATE OR REPLACE TRIGGER trace_trig
AFTER LOGON
ON DATABASE
DECLARE
 sqlstr VARCHAR2(200) := 'ALTER SESSION SET EVENTS ''10046 TRACE NAME CONTEXT FOREVER, LEVEL 4''';
BEGIN
  IF (USER = 'UWCLASS') THEN
    execute immediate sqlstr;
  END IF;
END trace_trig;
/

CREATE OR REPLACE TRIGGER SYS.set_trace
  AFTER LOGON ON DATABASE
  WHEN (USER like  '&USERNAME')
  DECLARE
      lcommand varchar(200);
  BEGIN
      EXECUTE IMMEDIATE 'alter session set statistics_level=ALL'; 
      EXECUTE IMMEDIATE 'alter session set max_dump_file_size=UNLIMITED';
      EXECUTE IMMEDIATE 'alter session set events ''10046 trace name context forever, level 12''';
  END set_trace;
  /


CREATE OR REPLACE TRIGGER SYS.TRC_PKREVCSORT AFTER 
LOGON ON DATABASE DECLARE 
progname v$session.program%type; 
BEGIN 
select max(program) into progname from v$session where audsid = userenv('sessionid'); 
if (progname = 'name of program') then 
execute immediate 'alter session set sql_trace = true'; 
end if; 
END;

 
http://www.dbazine.com/blogs/blog-cf/chrisfoot/blogentry.2006-12-16.1691009429


LOGON TRIGGER and LOGOFF

CREATE OR REPLACE TRIGGER SYSTEM.user_lgn after logon on database
begin
if ora_login_user = '' then
sys.dbms_session.SET_SQL_TRACE(TRUE);
end if;

end;
/ 

CREATE OR REPLACE TRIGGER SYSTEM.user_lgf before logoff on database
begin
if ora_login_user = '' then
sys.dbms_session.SET_SQL_TRACE(FALSE);

end if;
end;
/ 



select * from dba_triggers where owner = 'SYS' and TRIGGERING_EVENT LIKE '%LOG%'

select DISTINCT(OSUSER)  from v$session where OSUSER IN ('n138232','N138232')



*****MIKE's Trigger in wkabstrs 

Version 1

CREATE OR REPLACE TRIGGER set_trace_afterlogon
AFTER LOGON on DATABASE
BEGIN
IF SYS_CONTEXT('USERENV', 'HOST') = 'OA2\WA220410' 
   or 
   SYS_CONTEXT('USERENV', 'OS_USER') = 'N138232'
THEN
   sys.dbms_support.start_trace(waits=>false, binds=>false);
END IF;
END;
/


Hi Mike,  -- >
 
When the trigger is enabled it will log all the transactions that are fired from my machine even when I don't want to trace them.
 So lot of unnecessary big trace files will be created. I hope disk space is not an issue.
 You have created a database level trigger which I don't have access to enable or disable. 
 I was wondering instead of database level trigger if we can create a schema level after logon trigger (wkab10.schema) from wkab10 user 
 I can anytime enable and disable as per my requirement.
 
Could you also please provide execute privilege to dbms_system/ dbms_support package to WKAB10 user so that I can trace only specific functionality of a transaction.
 
Regards,
Mano

Mike's response -- >
There are only database-level after-logon triggers.  But, to give you some more flexibility, though, 
I have added an additional condition to the trigger so that it will check for an entry in the table wkab10.t_enable_trace. 
 If it finds a row in that table, tracing is enabled.  If not, trace is disabled.  So to enable tracing, just:
 
insert into wkab10.t_enable_trace values(1);
commit;
 
and to disable tracing:
 
truncate table wkab10.t_enable_trace;
 
You had requested permission for DBMS_SYSTEM and DBMS_SUPPORT in the previous e-mail so those are already granted.

GRANT EXECUTE ON SYS.DBMS_SUPPORT TO WKAB10
/
GRANT EXECUTE ON SYS.DBMS_SYSTEM TO WKAB10
/ 



Version 2

declare
   i_enable_trace NUMBER :=0;
BEGIN

IF SYS_CONTEXT('USERENV', 'HOST') = 'OA2\WA220410'
   or
   SYS_CONTEXT('USERENV', 'OS_USER') = 'N138232'
THEN
   select count(*) into i_enable_trace from wkab10.t_enable_trace;
   if i_enable_trace > 0
   then
      sys.dbms_support.start_trace(waits=>false, binds=>false);
   end if;
END IF;
END;

Good Link :http://www.oracleact.com/papers/oracle_sql_trace.html



Thanks Mike. That will work for me. --->
 
Mike, I may be wrong but as per my understanding we can create schema level after logon trigger
 (create or replace trigger aft_lgn after logon on wkab10.schema begin ......... end; ). 
It is not required now as you have put the additional condition.
 
Regards,
Mano


Mike's response -->

So you can!  I didn't know that the ".schema" worked for the AFTER LOGON event.  
Learn something every day.  I checked it out and in that case, you don't need my intervention on it. 
 You have permission on the packages you need and wkab10 can create the trigger on it's own schema so you can drop and create the trigger as you like.
  I'm going to drop the database-level trigger so that way you won't need my intervention if you want to make any adjustments to it.


CREATE OR REPLACE TRIGGER aft_lgn AFTER LOGON ON wkab10.schema
BEGIN
  IF SYS_CONTEXT('USERENV', 'HOST') = 'OA2\WA220410' AND SYS_CONTEXT('USERENV', 'OS_USER') = 'N138232'
  THEN
     execute immediate 'alter session set sql_trace=true' ;
     select 'TRACE1' from dual;
  END IF;
END;


****tkprof for Dash ************************

cd /boraw1su01/app/oracle/admin/wkabstrs/udump

cp wkabstrs_ora_134424.trc /boraw1su01/app/oracle/admin/wkabstrs/udump/traces_for_mano/wkabstrs_ora_134424.trc
cp wkabstrs_ora_145974.trc /boraw1su01/app/oracle/admin/wkabstrs/udump/traces_for_mano/wkabstrs_ora_145974.trc
cp wkabstrs_ora_188680.trc /boraw1su01/app/oracle/admin/wkabstrs/udump/traces_for_mano/wkabstrs_ora_188680.trc



tkprof wkabstrs_ora_134424.trc wkabstrs_ora_134424.trc.tkprof sys=no explain=wkab10/wkab10_wkabstrs

tkprof wkabstrs_ora_145974.trc wkabstrs_ora_145974.trc.tkprof sys=no explain=wkab10/wkab10_wkabstrs
tkprof wkabstrs_ora_188680.trc wkabstrs_ora_188680.trc.tkprof sys=no explain=wkab10/wkab10_wkabstrs



Sorry- But can you please regenerated the reports with explain=wkab10/wkab10_wkabstrs and sys=no and without any sort options


***************HEPYSTS****

CREATE OR REPLACE TRIGGER SYS.SET_TRACE_TRIGGER
AFTER LOGON
ON DATABASE
begin
   if user in ('PROD','PROD_DW','a229515','A229515')  then
   execute immediate 'ALTER SESSION SET events ''10046 trace name context forever, level 12''';
   end if;
  exception
   when others then
    null;
  end;
/



************HEDWSTS****************

CREATE OR REPLACE TRIGGER SYS.SET_TRACE_TRIGGER
AFTER LOGON
ON DATABASE
begin
   --if user in ('STRESS_DW','stress_dw') then
   --if user in ('STRESS_DW','stress_dw') then
   --if user in ('s061490','S061490','S059014','S042143') then
   if user in ('PROD_DW') then
   execute immediate 'ALTER SESSION SET events ''10046 trace name context forever, level 12''';
   end if;
  exception
   when others then
    null;
  end;
/

--execute immediate 'ALTER SESSION SET events ''10046 trace name context forever, level 12''';
--execute immediate 'ALTER SESSION SET EVENTS ''10035 trace name context forever, level 1''';


